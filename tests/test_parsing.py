import copy
from pathlib import Path

import pandas as pd
import pytest
from lxml import etree

from parsing import (
    elevation_gain_handler,
    get_handlers,
    get_simple_value_handler,
    parse_grit_html,
    parse_grit_table_body,
    parse_grit_table_header,
    participant_name_handler,
)


class TestHandlers:
    """
    Test the various handlers that parse table data nodes (i.e. with tag == "td")
    """

    td_int_node_str = """<td class="place">1</td>"""
    td_str_node_str = "<td>Golden</td>"
    td_float_node_str = "<td>481.01</td>"
    elevation_node_str = "<td>995ft (303.3m)</td>"
    participant_node_str = """<td class="ta-left"><div class="participantName">
    <div class="participantName__image">
        <div class="rsuCircleImg rsuCircleImg--xs rsuCircleImg--firstChar"><span>R</span></div>
    </div>
    <div class="participantName__name">
        <div class="participantName__name__firstName">Matthew</div>
        <div class="participantName__name__lastName">Perkett</div>
    </div>
</div></td>"""

    # missing meters in parentheses
    bad_elevation_node_str = "<td>995ft</td>"

    # missing first name
    bad_participant_node_str = """<td class="ta-left"><div class="participantName">
    <div class="participantName__image">
        <div class="rsuCircleImg rsuCircleImg--xs rsuCircleImg--firstChar"><span>R</span></div>
    </div>
    <div class="participantName__name">
        <div class="participantName__name__lastName">Perkett</div>
    </div>
</div></td>"""

    td_int_node = etree.HTML(td_int_node_str).find("body/td")
    td_str_node = etree.HTML(td_str_node_str).find("body/td")
    td_float_node = etree.HTML(td_float_node_str).find("body/td")
    elevation_node = etree.HTML(elevation_node_str).find("body/td")
    particpant_node = etree.HTML(participant_node_str).find("body/td")

    bad_elevation_node = etree.HTML(bad_elevation_node_str).find("body/td")
    bad_participant_node = etree.HTML(bad_participant_node_str).find("body/td")

    def test_get_simple_value_handler_int(self):
        """
        Test handler generated by get_simple_value_handler(int)
        """
        handler = get_simple_value_handler(int)
        val = handler(self.td_int_node)
        assert val == 1

        node = copy.copy(self.td_int_node)
        node.text = None
        val = handler(node)
        assert val is None

    def test_get_simple_value_handler_str(self):
        """
        Test handler generated by get_simple_value_handler(str)
        """
        handler = get_simple_value_handler(str)
        val = handler(self.td_str_node)
        assert val == "Golden"

        node = copy.copy(self.td_str_node)
        node.text = None
        val = handler(node)
        assert val is None

    def test_get_simple_value_handler_float(self):
        """
        Test handler generated by get_simple_value_handler(float)
        """
        handler = get_simple_value_handler(float)
        val = handler(self.td_float_node)
        assert val == 481.01

        node = copy.copy(self.td_float_node)
        node.text = None
        val = handler(node)
        assert val is None

    def test_get_simple_value_handler_error(self):
        """
        Unknown dtype for get_simple_value_handler(float)
        """
        with pytest.raises(ValueError) as e_info:
            get_simple_value_handler(list)
        expected_msg = "dtype (<class 'list'>) must be int, float, or str"
        assert e_info.value.args[0] == expected_msg

    def test_participant_name_handler(self):
        """
        Handler to get participant name
        """
        val = participant_name_handler(self.particpant_node)
        assert val == "Matthew Perkett"

    def test_participant_name_handler_error(self):
        """
        Error raised with missing first name node
        """
        with pytest.raises(ValueError) as e_info:
            participant_name_handler(self.bad_participant_node)
        expected_msg = f"Expected node length == 2, but got 1"
        assert e_info.value.args[0] == expected_msg

    def test_elevation_gain_handler(self):
        """
        Elevation gain handler
        """
        val = elevation_gain_handler(self.elevation_node)
        assert type(val) is float and val == 995.0

    def test_elevation_gain_handler_error(self):
        """
        Error when string of unexpected format is encountered (meters not provided in parantheses)
        """
        with pytest.raises(ValueError) as e_info:
            elevation_gain_handler(self.bad_elevation_node)
        expected_msg = (
            f"elevation gain text is not formatted as expected ('{self.bad_elevation_node.text}')"
        )
        assert e_info.value.args[0] == expected_msg


class TestParsingFunctions:
    """
    Test all parsing functions
    """

    EXPECTED_HEADER = [
        "Place",
        "Bib",
        "Name",
        "Gender",
        "City",
        "State",
        "Country",
        "Clock",  # NOTE: "<br>Time" dropped by lxml
        "Chip",  # NOTE: "<br>Time" dropped by lxml
        "Distance in Miles",
        "Progress",
        "Elevation Gain",
        "Pace",
        "Age",
        "Age",  # NOTE: "<br>Percentage" dropped by lxml
        "Run Crew Name",
    ]

    single_entry_table_html_str = """<table class="results results--rowHover" id="resultsTable">
    <thead>
        <tr>
            <th>Place</th>
            <th>Bib</th>
            <th>Name</th>
            <th>Gender</th>
            <th>City</th>
            <th>State</th>
            <th>Country</th>
            <th>Clock<br>Time</th>
            <th>Chip<br>Time</th>
            <th class="noSort">Distance in Miles</th>
            <th class="noSort">Progress</th>
            <th class="noSort">Elevation Gain</th>
            <th>Pace</th>
            <th>Age</th>
            <th>Age<br>Percentage<i class="icon icon-info tippy-tip" tabindex="0"
                    data-tippy-content="This shows how well you performed based on your age.  Higher numbers are better, with 100% being the best."
                    aria-expanded="false"></i></th>
            <th class="noSort">Run Crew Name</th>
        </tr>
    </thead>
    <tbody>
        <tr data-result-url="/Race/Results/90618/IndividualResult/BkfK?resultSetId=459362#U89338374">
            <td class="place">1</td>
            <td class="bib">2533</td>
            <td class="ta-left">
                <div class="participantName">
                    <div class="participantName__image">
                        <div class="rsuCircleImg rsuCircleImg--xs rsuCircleImg--firstChar"><span>R</span></div>
                    </div>
                    <div class="participantName__name">
                        <div class="participantName__name__firstName">Matthew</div>
                        <div class="participantName__name__lastName">Perkett</div>
                    </div>
                </div>
            </td>
            <td>M</td>
            <td>Golden</td>
            <td>CO</td>
            <td>US</td>
            <td class="time">34:42:29</td>
            <td class="time"></td>
            <td>259.06</td>
            <td>64.8%</td>
            <td>396ft (120.7m)</td>
            <td class="time">8:02</td>
            <td>36</td>
            <td>96.7</td>
            <td></td>
        </tr>
    </tbody>
</table>
"""
    table_header_node = etree.HTML(single_entry_table_html_str).find("body/table/thead")
    table_body_node = etree.HTML(single_entry_table_html_str).find("body/table/tbody")

    expected_row = [
        1,
        2533,
        "Matthew Perkett",
        "M",
        "Golden",
        "CO",
        "US",
        "34:42:29",
        None,
        259.06,
        "64.8%",
        396.0,
        "8:02",
        36,
        "96.7",
        None,
    ]
    expected_data = [expected_row[:]]
    expected_column_names = [
        "place",
        "bib",
        "name",
        "gender",
        "city",
        "state",
        "country",
        "clock_time",
        "chip_time",
        "distance_miles",
        "progress",
        "elevation_gain_ft",
        "pace",
        "age",
        "age_percentage",
        "run_crew_name",
    ]
    expected_df = pd.DataFrame(expected_data, columns=expected_column_names)

    @pytest.fixture
    def mock_single_entry_table_html_file(self, mocker):
        """
        Helper to mock opening an html file
        """
        data = self.single_entry_table_html_str
        mocked_data = mocker.mock_open(read_data=data)
        mocker.patch("builtins.open", mocked_data)

    def test_parse_grit_table_header(self):
        """
        Parse table header properly
        """
        header = parse_grit_table_header(self.table_header_node)
        assert header == self.EXPECTED_HEADER

    def test_parse_grit_table_header_error_01(self):
        """
        Table header node is None
        """
        with pytest.raises(ValueError) as e_info:
            parse_grit_table_header(None)
        expected_msg = "table_header is None"
        assert e_info.value.args[0] == expected_msg

    def test_parse_grit_table_header_error_02(self):
        """
        Table header node tag is not thead
        """
        node = copy.copy(self.table_header_node)
        node.tag = "unexpected_tag"
        with pytest.raises(ValueError) as e_info:
            parse_grit_table_header(node)
        expected_msg = "table_header tag is expected to be thead"
        assert e_info.value.args[0] == expected_msg

    def test_parse_grit_table_header_error_03(self):
        """
        Table header node has a child with an unexpected tag
        """
        node = copy.copy(self.table_header_node)
        node[0].tag = "unexpected_tag"
        with pytest.raises(ValueError) as e_info:
            parse_grit_table_header(node)
        expected_msg = "Expected table_header to have a single child with tag 'tr'"
        assert e_info.value.args[0] == expected_msg

    def test_parse_grit_table_header_error_04(self):
        """
        Table header node has zero children
        """
        node = copy.copy(self.table_header_node)
        node.clear()
        with pytest.raises(ValueError) as e_info:
            parse_grit_table_header(node)
        expected_msg = "Expected table_header to have a single child with tag 'tr'"
        assert e_info.value.args[0] == expected_msg

    def test_parse_grit_table_body(self):
        """
        Parse table body properly
        """
        data = parse_grit_table_body(self.table_body_node, get_handlers())
        assert len(data) == 1
        assert data[0] == self.expected_row

    def test_parse_grit_html(self):
        """
        Properly parse HTML table string
        """
        df = parse_grit_html(self.single_entry_table_html_str)
        pd.testing.assert_frame_equal(df, self.expected_df)
